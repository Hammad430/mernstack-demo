{"version":3,"sources":["images/img2.jpg","images/img3.jpg","images/img1.jpg","NavBar.js","Carousel.js","addRate.js","showRate.js","sell.js","buy.js","graph.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","items","src","require","altText","caption","header","key","Carousel","UncontrolledCarousel","addRate","resetForm","document","getElementById","reset","createDate","today","offset","Date","setDate","getDate","String","padStart","getMonth","getFullYear","state","regions","Alertvisible","e","preventDefault","payload","region","this","value","rate","tag","date","timeStamp","now","console","log","axios","url","method","data","then","setState","alertColor","message","window","setTimeout","catch","regionList","map","index","class","Container","Row","Col","Card","Form","id","onSubmit","handleSubmit","bind","Jumbotron","FormGroup","Label","Input","type","innerRef","placeholder","Alert","Button","block","React","Component","showRate","toggle","tab","activeTab","handleWindowSizeChange","width","innerWidth","componentDidMount","a","getRegions","getRates","getGraphData","dataRecieved","randomNumber","min","max","Math","floor","random","randomByte","randomPercent","toFixed","randomCssRgba","join","days","get","response","datasets","labels","count","length","forEach","element","push","label","_id","fill","lineTension","borderColor","rateArr","i","finalArr","ratesData","populateRates","flag","j","lastDay","lastWeek","lastMonth","displayRates","dataArr","scope","style","textAlign","displayRatesMob","tabId","addEventListener","removeEventListener","isMobile","tabs","classnames","active","TabContent","TabPane","Table","options","responsive","maintainAspectRatio","title","display","text","legend","position","scales","xAxes","ticks","autoSkip","maxRotation","minRotation","fontSize","yAxes","sell","shedName","shed","sellRate","address","contact","city","form","md","buy","posts","getBlogPost","alert","displayBlogPost","post","graph","Boolean","location","hostname","match","LogRocket","init","ReactDOM","render","path","component","exact","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d345cb94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img2.07632929.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.60d8d791.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img1.92c89e9c.jpg\";","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap';\n\nconst NavBar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Poultry App</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/showRate\">Rates</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/sell\">Sell</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/buy\">Buy</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Options\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem href=\"/addRate\">\n                  Add Rate\n                </DropdownItem>\n                <DropdownItem href=\"/graph\">\n                  Graph\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport { UncontrolledCarousel } from 'reactstrap';\nimport './styles.css';\nconst items = [\n  {\n    src: require('./images/img2.jpg'),\n    altText: 'Slide 1',\n    caption: 'See daily and previous rates for all regions',\n    header: 'Check Rates',\n    key: '1'\n  },\n  {\n    src: require('./images/img3.jpg'),\n    altText: 'Slide 2',\n    caption: 'List your Flock to sell',\n    header: 'Sell Flock',\n    key: '2'\n  },\n  {\n    src: require('./images/img1.jpg'),\n    altText: 'Slide 3',\n    caption: 'See information  for  ready flocks',\n    header: 'Buy Flock',\n    key: '3'\n  }\n];\n\nconst Carousel = () => <UncontrolledCarousel  items={items} />;\n\nexport default Carousel;","import  axios from 'axios';\nimport React from 'react';\nimport { Alert, Card, Container, Row, Col, Jumbotron, Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport './styles.css';\n\nclass addRate extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {regions:[\"Punjab\",\"Sindh\",\"Balochistan\",\"KPK\",\"Federal\" ],\n                        Alertvisible: false \n        };\n    }\n\n    resetForm = () => { \n        document.getElementById(\"rateForm\").reset();\n      }\n\n    createDate = (today,offset) => {\n        today = new Date(today.setDate(today.getDate()+offset));\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n        return today = dd + '-' + mm + '-' + yyyy;\n    };\n\n    handleSubmit(e) {\n\n        e.preventDefault();\n        const payload = {\n            region: this.region.value,\n            rate: this.rate.value,\n            tag: 'rate',\n            date: this.createDate(new Date(),0),\n            timeStamp: Date.now()\n          };\n        console.log(payload);\n        axios({\n            url:'/api/save',\n            method:'POST',\n            data: payload\n          })\n            .then(() => {\n              console.log('New rate sent to the server!');\n              this.setState({\n            \n                Alertvisible: true, \n                alertColor: 'primary', \n                message: 'New rate added'}, \n                \n                ()=> {window.setTimeout(()=>{this.setState({Alertvisible:false})},3000)\n                });\n                this.resetForm();\n            })\n            .catch(() => {\n              console.log('Internal server error!');\n            });;\n        };      \n\n    render(){\n        var regionList = this.state.regions;\n        regionList = regionList.map(function(regionList, index){\n            return(\n                <option key={index} value={regionList}>{regionList}</option>\n            )\n        });\n        return(\n        <div className=\"addRate\">\n        <div class=\"container h-100\">\n        <div class=\"row h-100 justify-content-center align-items-center\">\n        <Container className=\"rateContainer\">\n        <Row>\n        <Col>\n        <Card>\n        <Form id=\"rateForm\" onSubmit={this.handleSubmit.bind(this)}>\n        <Row>\n        <Col className=\"rateCol\">\n        <br/>\n        <p className=\"rateFormTitle\">Enter Todays Rate</p>\n        <Jumbotron>\n        <FormGroup>\n        <Label>Select Region</Label>\n        <Input type=\"select\" innerRef={(region) => (this.region = region)}>\n            {regionList}\n        </Input>\n        </FormGroup>\n        <FormGroup>\n        <Label>Enter Rate</Label>\n        <Input type=\"number\" placeholder=\"123\" innerRef={(rate) => (this.rate = rate)} />\n        </FormGroup>\n        <div className=\"alertDiv\">\n        <Alert color={this.state.alertColor} isOpen={this.state.Alertvisible}> {this.state.message} </Alert>\n        </div>\n        </Jumbotron>\n        <Button block className=\"butt\">Add</Button>\n        <br/>\n      </Col>\n      </Row>\n      </Form>\n      </Card>\n      </Col>\n      </Row>\n      </Container> \n        </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default addRate;\n\n","import  axios from 'axios';\nimport './styles.css';\nimport { Table } from 'reactstrap';\nimport React from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport classnames from 'classnames';\nimport {Line} from 'react-chartjs-2';\n\nclass showRate extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            finalArr: [],\n            ratesData: [],\n            regions: [],\n            width: window.innerWidth,\n            activeTab: '1',\n            flag: 0,\n            dataRecieved: 0,\n            labels: [],\n            datasets:[]\n        };\n    }\n\n    toggle = tab => {\n      if(this.state.activeTab !== tab) this.setState({activeTab: tab});\n    }\n\n    componentWillMount() {\n      window.addEventListener('resize', this.handleWindowSizeChange);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleWindowSizeChange);\n    }\n\n    handleWindowSizeChange = () => {\n      this.setState({ width: window.innerWidth });\n    };\n\n    createDate = (today,offset) => {\n      today = new Date(today.setDate(today.getDate()+offset));\n      var dd = String(today.getDate()).padStart(2, '0');\n      var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n      var yyyy = today.getFullYear();\n      return today = dd + '-' + mm + '-' + yyyy;\n  };\n\n    componentDidMount = async () => {\n\n      // let today = new Date();\n      // let lastDay = ( d => new Date(d.setDate(d.getDate()-1)) )(new Date);\n      // let lastWeek = ( d => new Date(d.setDate(d.getDate()-7)) )(new Date);\n      // let lastMonth = ( d => new Date(d.setDate(d.getDate()-30)) )(new Date);\n\n      await this.getRegions();\n      await this.getRates(this.createDate(new Date(),0),'today');\n      await this.getRates(this.createDate(new Date(),-1),'lastDay');\n      await this.getRates(this.createDate(new Date(),-7),'lastWeek');\n      await this.getRates(this.createDate(new Date(),-30),'lastMonth');\n      await this.getGraphData(7);\n      this.setState({dataRecieved:1});\n      };\n\n    randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n    randomByte = () => this.randomNumber(0, 255)\n    randomPercent = () => (this.randomNumber(50, 100) * 0.01).toFixed(2)\n    randomCssRgba = () => `rgba(${[this.randomByte(), this.randomByte(), this.randomByte(), this.randomPercent()].join(',')})`\n\n    getGraphData = async (days) => {\n      const response = await axios.get('/api/rates/Last'+days)\n      const data = await response.data\n      console.log(data)\n      var datasets = []\n      var labels = []\n      var count = data[0].rate.length-1\n      data[0].rate.forEach(element => {\n          labels.push(this.createDate(new Date(),-count))\n          count-=1\n      });\n      this.setState({labels: labels})\n      data.forEach(element => {\n          var color=this.randomCssRgba()\n          console.log(color)\n        datasets.push({\n            label: element._id,\n            fill: false,\n            lineTension: 0.5,\n            borderColor: color,\n            data: element.rate\n        })\n      }); \n      console.log(datasets)\n      this.setState({datasets: datasets})\n    };\n      \n    getRegions = async () => { \n      const response = await axios.get('/api/regions')\n      //console.log('getRegions api called')\n      const data = await response.data\n      this.setState({regions: data})\n      //console.log('getRegions regions setState:' + this.state.regions)\n      const rateArr = []\n      for (let i=0;i<this.state.regions.length;i++)\n      {\n        rateArr.push({region: this.state.regions[i]})\n      }\n      this.setState({finalArr: rateArr})\n      //console.log('getRegions finalArr setState:' + this.state.finalArr[0].region)\n    };\n   \n    getRates = async (date, type) => {\n      const response = await axios.get('/api/'+ date)\n      //console.log('getRates api called')\n      const data = await response.data\n      this.setState({ratesData: data})\n      // this.state.ratesData.forEach(element => {\n      //   console.log(element)\n      // });\n      this.populateRates(type);\n    };\n    \n    populateRates = (value) => {\n      // console.log('populate function called')\n      // console.log(this.state.finalArr.length)\n      const rateArr = this.state.finalArr\n      for (let i=0;i<this.state.regions.length;i++)\n      {\n        var flag =0;\n        var rate =0;\n        for(let j=0;j<this.state.ratesData.length;j++)\n        {\n            if(this.state.regions[i]===this.state.ratesData[j].region)\n            {\n              flag=1;\n              rate=this.state.ratesData[j].rate;\n            }    \n        }\n        if(flag===1)\n        {\n          if(value==='today')\n            rateArr[i].today = rate;\n          else if  (value==='lastDay')\n            rateArr[i].lastDay = rate;\n          else if  (value==='lastWeek')\n            rateArr[i].lastWeek = rate;\n          else if  (value==='lastMonth')\n            rateArr[i].lastMonth = rate;\n        }   \n        else\n        {\n          if(value==='today')\n            rateArr[i].today = '-';\n          else if  (value==='lastDay')\n            rateArr[i].lastDay = '-';\n          else if  (value==='lastWeek')\n            rateArr[i].lastWeek = '-';\n          else if  (value==='lastMonth')\n            rateArr[i].lastMonth = '-';\n        }\n      }\n      this.setState({finalArr: rateArr});\n      // this.state.finalArr.forEach(element => {\n      //   console.log(element)\n      // });\n    };\n\n    displayRates = (dataArr) => {\n        if(!dataArr.length) return null;\n        return dataArr.map((data, index) => (\n        <tr key={index}>\n          <th scope=\"row\" style={{ textAlign: 'left' }}>{data.region}</th>\n          <td>{data.today}</td>\n          <td>{data.lastDay}</td>\n          <td>{data.lastWeek}</td>\n          <td>{data.lastMonth}</td>\n        </tr>\n        ));\n      };\n\n      displayRatesMob = (dataArr,tabId) => {\n        if(!dataArr.length) return null;\n        if(tabId===1)\n        {\n          return dataArr.map((data, index) => (\n            <tr key={index}>\n              <th scope=\"row\" style={{ textAlign: 'left' }}>{data.region}</th>\n              <td>{data.today}</td>\n            </tr>\n            ));\n        }\n        else if(tabId===2)\n        {\n          return dataArr.map((data, index) => (\n            <tr key={index}>\n              <th scope=\"row\" style={{ textAlign: 'left' }}>{data.region}</th>\n              <td>{data.lastDay}</td>\n            </tr>\n            ));\n        }\n        else if(tabId===3)\n        {\n          return dataArr.map((data, index) => (\n            <tr key={index}>\n              <th scope=\"row\" style={{ textAlign: 'left' }}>{data.region}</th>\n              <td>{data.lastWeek}</td>\n            </tr>\n            ));\n        }\n        else if(tabId===4)\n        {\n          return dataArr.map((data, index) => (\n            <tr key={index}>\n              <th scope=\"row\" style={{ textAlign: 'left' }}>{data.region}</th>\n              <td>{data.lastMonth}</td>\n            </tr>\n            ));\n        }        \n      };\n      \n    render(){\n      const { width } = this.state;\n      const isMobile = width <= 500;\n      if(this.state.dataRecieved===1)\n      {     \n        if (isMobile) {\n          return (\n          <div className=\"mobileView\">\n          <div>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n            >\n              Today\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n            >\n              Yesterday\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '3' })}\n              onClick={() => { this.toggle('3'); }}\n            >\n              Last Week\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '4' })}\n              onClick={() => { this.toggle('4'); }}\n            >\n              Last Month\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Table>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left' }}>Region</th>\n                  <th>Rate</th>\n                </tr>\n              </thead>\n              <tbody>\n                    {this.displayRatesMob(this.state.finalArr,1)}\n              </tbody>\n            </Table>\n          </TabPane>\n          <TabPane tabId=\"2\">\n          <Table>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left' }}>Region</th>\n                  <th>Rate</th>\n                </tr>\n              </thead>\n              <tbody>\n                    {this.displayRatesMob(this.state.finalArr,2)}\n              </tbody>\n            </Table>\n          </TabPane>\n          <TabPane tabId=\"3\">\n          <Table>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left' }}>Region</th>\n                  <th>Rate</th>\n                </tr>\n              </thead>\n              <tbody>\n                    {this.displayRatesMob(this.state.finalArr,3)}\n              </tbody>\n            </Table>\n          </TabPane>\n          <TabPane tabId=\"4\">\n          <Table>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left'}}>Region</th>\n                  <th>Rate</th>\n                </tr>\n              </thead>\n              <tbody>\n                    {this.displayRatesMob(this.state.finalArr,4)}\n              </tbody>\n            </Table>\n          </TabPane>\n        </TabContent>\n      </div>\n      <div className=\"mobileViewGraphDiv\">\n        <Line\n         data={this.state}\n         options={{\n           responsive: true,\n           maintainAspectRatio: false,\n           title:{\n             display:true,\n             text:'Rates per Region'\n           },\n           legend:{\n             display:true,\n             position:'bottom'\n           },\n           scales: {\n            xAxes: [{\n              ticks: {\n                autoSkip: false,\n                maxRotation: 0,\n                minRotation: 0,\n                fontSize: 7\n              }\n            }],\n            yAxes:[{\n              ticks:{\n                fontSize: 7\n              }\n            }]\n          }\n         }}\n       />\n     </div>  \n      </div>\n      \n        );\n        } else {\n          return (\n            <div className=\"browserView\">\n            <div className=\"ratesTable\">\n               <Table>\n                 <thead>\n                   <tr>\n                     <th style={{ textAlign: 'left' }}>Region</th>\n                     <th>Today</th>\n                     <th>Yesterday</th>\n                     <th>Last Week</th>\n                     <th>Last Month</th>\n                   </tr>\n                 </thead>\n                 <tbody>\n                       {this.displayRates(this.state.finalArr)}\n                 </tbody>\n               </Table>\n             </div>\n             <div className=\"graphDiv\">\n        <Line\n         data={this.state}\n         options={{\n           maintainAspectRatio: false,\n           responsive:true,\n           title:{\n             display:false,\n             text:'Rates per Region Chart',\n             fontSize:16\n           },\n           legend:{\n             display:true,\n             position:'bottom'\n           }\n         }}\n       />\n     </div>  \n             </div>\n          \n        );\n      }\n      }\n      else\n      {\n        return <span>Loading rates...</span>;\n      }\n    }\n}\n\nexport default showRate;\n","import  axios from 'axios';\nimport React from 'react';\nimport { Alert, Container, Row, Col, Jumbotron, Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport './styles.css';\n\nclass sell extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {regions:[\"Punjab\",\"Sindh\",\"Balochistan\",\"KPK\",\"Federal\" ],\n        Alertvisible: false \n        };\n    }\n\n    createDate = (today,offset) => {\n        today = new Date(today.setDate(today.getDate()+offset));\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n        return today = dd + '-' + mm + '-' + yyyy;\n    };\n\n    resetForm = () => { \n        document.getElementById(\"sellForm\").reset();\n    }\n\n    handleSubmit(e) {\n\n        e.preventDefault();\n        const payload = {\n            shedName: this.shed.value,\n            sellRate: this.rate.value,\n            address: this.address.value,\n            contact: this.contact.value,\n            city: this.city.value,\n            region: this.region.value,\n            tag: 'sell',\n            date: this.createDate(new Date(),0),\n            timeStamp: Date.now()\n          };\n        console.log(payload);\n        axios({\n            url:'/api/saveSelling',\n            method:'POST',\n            data: payload\n          })\n            .then(() => {\n              console.log('New rate sent to the server!');\n              this.setState({\n            \n                Alertvisible: true, \n                alertColor: 'primary', \n                message: 'Selling details added'}, \n                \n                ()=> {window.setTimeout(()=>{this.setState({Alertvisible:false})},3000)\n                });\n                this.resetForm();\n            })\n            .catch(() => {\n              console.log('Internal server error!');\n            });;\n        };\n\n    render(){\n        var regionList = this.state.regions;\n        regionList = regionList.map(function(regionList, index){\n            return(\n                <option key={index} value={regionList}>{regionList}</option>\n            )\n        });\n        return(\n        <div className=\"addRate\">\n        <Container>\n        <Row>\n        <Col>\n        <Form className=\"sellForm\" id=\"sellForm\" onSubmit={this.handleSubmit.bind(this)}>\n            <Row>\n                <br/>\n                <p className=\"sellFormTitle\">Enter Flock Details</p>\n            </Row>\n            <Jumbotron className=\"sellJumbotron\">\n            <Row form>\n            <Col md={6}>\n                <FormGroup>\n                    <Label>Shed Name</Label>\n                    <Input type=\"text\" placeholder=\"enter shed name e.g (Chick House)\"\n                    innerRef={(shed) => (this.shed = shed)} />\n                </FormGroup>\n            </Col>\n            <Col md={6}>\n                <FormGroup>\n                    <Label>Selling Rate</Label>\n                    <Input type=\"number\" placeholder=\"enter selling rate e.g (123 /Kg)\"\n                    innerRef={(rate) => (this.rate = rate)} />\n                </FormGroup>\n            </Col>\n            </Row>\n                <FormGroup>\n                    <Label>Address</Label>\n                    <Input type=\"text\" placeholder=\"1234 Main St\"\n                    innerRef={(address) => (this.address = address)}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label>Contact No</Label>\n                    <Input type=\"text\" placeholder=\"0345 8509705\"\n                    innerRef={(contact) => (this.contact = contact)}/>\n                </FormGroup>\n            <Row form>\n            <Col md={6}>\n                <FormGroup>\n                  <Label>City</Label>\n                  <Input type=\"text\" placeholder=\"Islamabad\"\n                  innerRef={(city) => (this.city = city)}/>\n                </FormGroup>\n            </Col>\n            <Col md={6}>\n                <FormGroup>\n                    <Label>Select Region</Label>\n                    <Input type=\"select\" innerRef={(region) => (this.region = region)}>\n                    {regionList}\n                    </Input>\n                </FormGroup>\n            </Col>\n            </Row>\n            <div className=\"alertDiv\">\n                <Alert color={this.state.alertColor} isOpen={this.state.Alertvisible}> {this.state.message} </Alert>\n            </div>\n            </Jumbotron>\n            <Button block className=\"sellButt\">Submit</Button>\n            <br/>\n        </Form>\n        </Col>\n        </Row>\n        </Container>    \n        </div>\n        );\n    }\n}\n\n\nexport default sell;\n\n","import React from 'react';\nimport  axios from 'axios';\nimport './styles.css';\nimport { Jumbotron } from 'reactstrap';\n\nclass buy extends React.Component{\n\n  state = {\n    posts: []\n  };\n\n  componentDidMount = () => {\n    this.getBlogPost();\n  };\n\n  //retreive data from mongodb through server and output on react client\n  getBlogPost = () => {\n    axios.get('/api/listings')\n      .then((response) =>{\n        const data = response.data;\n        console.log(data);\n        this.setState({posts: data});\n        console.log('Data has been received!');\n      })\n      .catch(() =>{\n        alert('Error receiving data!');\n      });\n  };\n  \n  displayBlogPost = (posts) => {\n    if(!posts.length) return null;\n\n    //loop over each post to display all posts\n    //.map is used for looping\n    //index and key is used  to identify  individual post in loop\n    return posts.map((post,  index) => (\n      <div key={index} className=\"listingDiv\">\n        <Jumbotron>\n        <h1 className=\"display-5\">{post.shedName}</h1>\n        <p className=\"lead\">Selling Rate: {post.sellRate} /Kg</p>\n        <hr className=\"my-2\" />\n        <p>Address: {post.address}</p>\n        <p>Contact No: {post.contact}</p>\n        <p>City: {post.city}</p>\n        <p>Region: {post.region}</p>\n      </Jumbotron>\n      </div>\n    ));\n  };\n\n  render(){\n\n    //JSX\n    return(\n      <div>\n        {this.displayBlogPost(this.state.posts)}\n      </div>\n    );\n  }\n}\n\nexport default buy;","import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport  axios from 'axios';\nimport './styles.css';\n\nclass graph extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            labels: [],\n            datasets:[]\n        };\n    }\n    componentDidMount(){\n        this.getGraphData(7);\n    }\n\n    createDate = (today,offset) => {\n        today = new Date(today.setDate(today.getDate()+offset));\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n        return today = dd + '-' + mm + '-' + yyyy;\n    };\n\n    // random_rgba = () => {\n    //     var o = Math.round, r = Math.random, s = 255;\n    //     return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\n    // }\n\n    randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n    randomByte = () => this.randomNumber(0, 255)\n    randomPercent = () => (this.randomNumber(50, 100) * 0.01).toFixed(2)\n    randomCssRgba = () => `rgba(${[this.randomByte(), this.randomByte(), this.randomByte(), this.randomPercent()].join(',')})`\n   \n    getGraphData = async (days) => {\n      const response = await axios.get('/api/rates/Last'+days)\n      const data = await response.data\n      console.log(data)\n      var datasets = []\n      var labels = []\n      var count = data[0].rate.length-1\n      data[0].rate.forEach(element => {\n          labels.push(this.createDate(new Date(),-count))\n          count-=1\n      });\n      this.setState({labels: labels})\n      data.forEach(element => {\n          var color=this.randomCssRgba()\n          console.log(color)\n        datasets.push({\n            label: element._id,\n            fill: false,\n            lineTension: 0.5,\n            borderColor: color,\n            data: element.rate\n        })\n      }); \n      console.log(datasets)\n      this.setState({datasets: datasets})\n    };\n      \n    render(){\n      return(\n        <div className=\"graphDiv2\">\n        <Line\n         data={this.state}\n         options={{\n           title:{\n             display:true,\n             text:'Rates per Region',\n             fontSize:20\n           },\n           legend:{\n             display:true,\n             position:'bottom'\n           }\n         }}\n       />\n     </div>       \n      );\n}\n}\n\nexport default graph;\n\n\n// const state = {\n//   labels: ['January', 'February', 'March',\n//            'April', 'May'],\n//   datasets: [\n//     {\n//       label: 'Rainfall',\n//       fill: true,\n//       lineTension: 0.5,\n//       //backgroundColor: 'rgba(75,192,192,1)',\n//       backgroundColor: \"rgba(153,255,51,0.6)\",\n//       borderColor: 'rgba(0,0,0,1)',\n//       borderWidth: 2,\n//       data: [65, 59, 80, 81, 56]\n//     },\n//     {\n//         label: 'Humidity',\n//         fill: true,\n//         lineTension: 0.5,\n//         //backgroundColor: 'rgba(175,19,129,11)',\n//         backgroundColor: \"rgba(255,153,0,0.6)\",\n//         borderColor: 'rgba(1,1,1,1)',\n//         borderWidth: 2,\n//         data: [20, 39, 50, 61, 96]\n//       }\n//   ]\n// }\n\n// export default class graph extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"graphDiv\">\n//         <Line\n//           data={state}\n//           options={{\n//             title:{\n//               display:true,\n//               text:'Average Rainfall per month',\n//               fontSize:20\n//             },\n//             legend:{\n//               display:true,\n//               position:'right'\n//             }\n//           }}\n//         />\n//       </div>\n//     );\n//   }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Carousel from './Carousel';\nimport addRate from './addRate';\nimport showRate from './showRate';\nimport sell from './sell';\nimport buy from './buy';\nimport graph from './graph';\nimport * as serviceWorker from './serviceWorker';\nimport LogRocket from 'logrocket';\nLogRocket.init('xtdmy1/poultryapp');\n\n\n\nReactDOM.render(\n  <Router>\n      <div>\n        <Route path=\"/\" component={NavBar} />\n        <Route exact path=\"/\" component={Carousel} />\n        <Route exact path=\"/sell\" component={sell} />\n        <Route exact path=\"/buy\" component={buy} />\n        <Route exact path=\"/addRate\" component={addRate} />\n        <Route exact path=\"/showRate\" component={showRate} />\n        <Route exact path=\"/graph\" component={graph} />\n      </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}